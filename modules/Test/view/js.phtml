<h2 style="margin:100px">JS practice</h2>

<script>
    require(["jquery", "waterfall", "waterfall"], function($, waterfall, wf) {

        $("footer .center").hide();

/**

i - текущий айтем
$.ajax({url, type, success: callbackConstructor(i) })

function callbackConstructor(i){

	return function(){
		queue[i],success()
		// сконструировать аджакс для айтемов, у которых parentId = i
		arr = getItemsDependentOf(i)
		foreach(a in arr)
			arr.push( getAjax()  )

		arr[0]()
		arr[1]()
		...
	}
}


*/

        var count = 1;


        /**
         * Массив тасков, который надо собирать вручную
         * [!] Имена полей строго соблюдать
         * @type {*[]}
         */
        var callbackArr = [
            {
                url: "my/grid-products/orders_id/117/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 01")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 02")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 03")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 04")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 05", waterfall.counter)
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 06")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 07")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 08")
                }
            },
            {
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "get",
                dataType: "html",
                success: function (data) {
                    console.log("call - 09")
                }
            }
        ];

        /**
         * [1] Формируем очередь
         */
        waterfall.queue = callbackArr;

        /**
         * [2] Задаем Финальный колбэк
         */
        waterfall.onDone = function () {
            console.log("onDone procesed", waterfall.counter,  wf.queue.length)

            // Новый водопад
            waterfall.add({
                url: "my/grid-products/orders_id/118/operation/clone",
                type: "post",
                dataType: "html",
                success: function (data) {
                    console.log("call - 11")
                }})
                .add({
                    url: "test/ajax/sleep",
                    type: "post",
                    dataType: "html",
                    success: function (data) {
                        console.log("call - 12")
                    }});

            //waterfall.processParallel();


        }

        /**
         * [3] Запускаем водопад
         */
        //waterfall.processParallel();



            /*
        var arr = [
            function () {
                console.log(arguments)
            },
            function () {
                console.log(arguments.length)
            }
        ]

        function asd(a){
            var i
            return function () {
                for(i=0; i < a.length; i++){
                    a[i]()
                }
            }
        }

        var closur = asd(arr)
        closur()
        */

        // [!] Водопад, вариант 2
        waterfall.queue = []
        waterfall.counter = 0;
        waterfall.onDone = function () {
            console.log("seqental Done!")
        }

        var id, firstId;

        id = waterfall.push({
            url: "test/ajax/sleep",
            type: "post",
            dataType: "html",
            parentId: null,
            success: function (data) {
                console.log("call - 20")
            }});
        firstId = id;

        id = waterfall.push({
            url: "my/grid-products/orders_id/118/operation/clone",
            type: "post",
            dataType: "html",
            parentId: null,
            success: function (data) {
                console.log("call - 21")
            }});

        id = waterfall.push({
            url: "my/grid-products/orders_id/117/operation/clone",
            type: "post",
            dataType: "html",
            parentId: firstId,
            success: function (data) {
                console.log("call - 22")
            }});

        //waterfall.processSequental()


        // --------------------------

        /**
         * Фабричный метод (его можно исполльзовтаь с new и без.. Он всегда продуцрует объект). В них нельзя использовтаь прототипы
         * [!] прототипное наследование
         * Наследование
         * множественное наследование
         * Паттерн для реализации наследования
         *
         * Константы - через название класса
         * Отделение логики от поведения
         */

        var i = 10;
        var arr = new Array();

        for(i; i<15; i++)
            arr.push(i)

        //console.log(arr)

        var obj = {a:1}

        obj.__proto__ = {a:12, b:34,  pow: function () {
            return this.c + 10
        }}

        obj.__proto__.__proto__ = {c:33}

        //console.log(obj.b) // 34

        //delete obj.a // убить а из __proto__

        //console.log(obj.pow())

        //--------------------------

        foo.a = 15
        foo()

        function foo(param) {
            foo.a = 10
        }

        //console.log(foo.a)

        //--------------------------


        function A() {
            return this.a++
        }

        A.prototype = {a:10} // аналогично перезаписи свойства __proto__

        var a = new A()

        //console.log(a)

        /**
         * Методы пихаем в prototype, а поля в сам объект
         * Тогда, у всех новых объектов будет ОДИН и тот же прототип
         */

        function Bar() {
             // здесь поля
            this.a = 12;

            this.bar = function () {
                console.log(this)
            }

            function zxc() {
                console.log(this)
            }
        }

        Bar.prototype = {
            // здесь методы
            method:function () {
                this.a++
            }
        }


        //--------------------------

        /**
         * [!] extend-тип наследования
         * @constructor
         */
        function Asd() {
            Bar.call(this)  // extend. Взяли методы класса Bar и присоединили их к Asd. Однако, Bar.prototype НЕ пронаследовался
        }

        var asd = new Asd;

        // asd.method() == undefined // Error
        // asd.bar() // Ok
























    });


</script>
